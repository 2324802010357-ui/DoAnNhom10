@model List<DoAnNhom10.Models.CartItem>

@{
    ViewBag.Title = "Giỏ hàng";
    var total = Model != null && Model.Any() ? Model.Sum(x => x.Total) : 0;
    var itemCount = Model != null ? Model.Sum(x => x.Quantity) : 0;
    var shippingFee = total >= 500000 ? 0 : 30000;
    var finalTotal = total + shippingFee;
}

<div class="container">
    <!-- Cart Header -->
    <div class="section-title">
        <h2><i class="fas fa-shopping-cart"></i> Giỏ hàng của bạn</h2>
        <p><span id="cart-count">@itemCount</span> sản phẩm trong giỏ hàng</p>
    </div>

    @if (Model == null || Model.Count == 0)
    {
        <!-- Empty Cart -->
        <div class="empty-cart">
            <div class="empty-cart-content">
                <i class="fas fa-shopping-cart fa-5x text-muted mb-4"></i>
                <h3>Giỏ hàng của bạn đang trống</h3>
                <p class="text-muted">Hãy khám phá các sản phẩm tuyệt vời của chúng tôi!</p>
                <a href="@Url.Action("Index", "Products")" class="btn btn-primary btn-lg">
                    <i class="fas fa-shopping-bag"></i> Tiếp tục mua sắm
                </a>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Cart Items -->
            <div class="col-lg-8">
                <div class="cart-items">
                    @foreach (var item in Model)
                    {
                        <div class="cart-item" id="cart-item-@item.ProductID" data-product-id="@item.ProductID" data-price="@item.Price">
                            <div class="row align-items-center">
                                <div class="col-md-2">
                                    <div class="product-image">
                                        <img src="@Url.Content(item.ImageUrl)" alt="@item.ProductName" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="product-info">
                                        <h5 class="product-name">@item.ProductName</h5>
                                        <div class="product-meta">
                                            <span class="text-muted">SKU: #@item.ProductID</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="product-price">
                                        <span class="price">@item.Price.ToString("N0")đ</span>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="quantity-controls">
                                        <div class="quantity-input-group" id="qty-group-@item.ProductID">
                                            <button type="button" class="quantity-btn minus" onclick="changeQuantity(@item.ProductID, @(item.Quantity - 1))">
                                                <i class="fas fa-minus"></i>
                                            </button>
                                            <input type="number" 
                                                   value="@item.Quantity" 
                                                   min="1" 
                                                   max="99" 
                                                   class="quantity-input" 
                                                   id="qty-@item.ProductID"
                                                   onchange="changeQuantity(@item.ProductID, this.value)" />
                                            <button type="button" class="quantity-btn plus" onclick="changeQuantity(@item.ProductID, @(item.Quantity + 1))">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="item-total">
                                        <span class="total-price" id="total-@item.ProductID">@item.Total.ToString("N0")đ</span>
                                        <button type="button" class="remove-btn" onclick="removeItem(@item.ProductID)" title="Xóa sản phẩm">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Cart Actions -->
                <div class="cart-actions">
                    <a href="@Url.Action("Index", "Products")" class="btn btn-outline-primary">
                        <i class="fas fa-arrow-left"></i> Tiếp tục mua sắm
                    </a>
                    <button type="button" class="btn btn-outline-secondary" onclick="clearCart()">
                        <i class="fas fa-trash"></i> Xóa tất cả
                    </button>
                </div>
            </div>

            <!-- Cart Summary -->
            <div class="col-lg-4">
                <div class="cart-summary">
                    <h4><i class="fas fa-receipt"></i> Tóm tắt đơn hàng</h4>
                    
                    <div class="summary-row">
                        <span>Tạm tính (<span id="summary-count">@itemCount</span> sản phẩm):</span>
                        <span id="summary-subtotal">@total.ToString("N0")đ</span>
                    </div>
                    
                    <div class="summary-row">
                        <span>Phí vận chuyển:</span>
                        <span class="text-success" id="shipping-fee">
                            @if (shippingFee == 0)
                            {
                                <span>Miễn phí</span>
                            }
                            else
                            {
                                <span>@shippingFee.ToString("N0")đ</span>
                            }
                        </span>
                    </div>

                    @if (total < 500000 && total > 0)
                    {
                        <div class="shipping-notice">
                            <i class="fas fa-info-circle"></i>
                            Mua thêm <strong>@((500000 - total).ToString("N0"))đ</strong> để được miễn phí vận chuyển!
                        </div>
                    }
                    
                    <div class="summary-divider"></div>
                    
                    <div class="summary-total">
                        <span>Tổng cộng:</span>
                        <span class="total-amount" id="final-total">@finalTotal.ToString("N0")đ</span>
                    </div>

                    <!-- Promo Code -->
                    <div class="promo-code">
                        <h6><i class="fas fa-tag"></i> Mã giảm giá</h6>
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Nhập mã giảm giá" id="promoCode">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" onclick="applyPromoCode()">
                                    Áp dụng
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Checkout Button -->
                    <div class="checkout-section">
                        @if (Session["USER"] != null)
                        {
                            <a href="@Url.Action("Checkout", "Cart")" class="btn btn-success btn-block btn-lg checkout-btn">
                                <i class="fas fa-credit-card"></i> Thanh toán ngay
                            </a>
                        }
                        else
                        {
                            <p class="text-muted text-center mb-3">
                                <i class="fas fa-info-circle"></i> Bạn cần đăng nhập để thanh toán
                            </p>
                            <a href="@Url.Action("Login", "Account")" class="btn btn-primary btn-block">
                                <i class="fas fa-sign-in-alt"></i> Đăng nhập
                            </a>
                            <a href="@Url.Action("Register", "Account")" class="btn btn-outline-success btn-block">
                                <i class="fas fa-user-plus"></i> Đăng ký tài khoản
                            </a>
                        }
                    </div>

                    <!-- Security Badge -->
                    <div class="security-badges">
                        <div class="security-item">
                            <i class="fas fa-shield-alt"></i>
                            <span>Thanh toán an toàn</span>
                        </div>
                        <div class="security-item">
                            <i class="fas fa-truck"></i>
                            <span>Giao hàng nhanh chóng</span>
                        </div>
                        <div class="security-item">
                            <i class="fas fa-undo"></i>
                            <span>Đổi trả dễ dàng</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Hidden forms for cart updates -->
@foreach (var item in Model ?? new List<DoAnNhom10.Models.CartItem>())
{
    using (Html.BeginForm("Update", "Cart", FormMethod.Post, new { id = "form-update-" + item.ProductID, style = "display: none;" }))
    {
        @Html.AntiForgeryToken()
        <input type="hidden" name="id" value="@item.ProductID" />
        <input type="hidden" name="qty" id="hidden-qty-@item.ProductID" value="@item.Quantity" />
    }
}

@section scripts {
    <script>
    var isUpdating = false; // Prevent multiple simultaneous updates
    
    function changeQuantity(productId, newQuantity) {
        // Prevent multiple updates
        if (isUpdating) {
            return false;
        }
        
        // Validate quantity
        var qty = parseInt(newQuantity);
        if (isNaN(qty) || qty < 1) {
            qty = 1;
        }
        if (qty > 99) {
            qty = 99;
        }
        
        // Update UI immediately
        var input = document.getElementById('qty-' + productId);
        var qtyGroup = document.getElementById('qty-group-' + productId);
        var hiddenInput = document.getElementById('hidden-qty-' + productId);
        
        input.value = qty;
        hiddenInput.value = qty;
        
        // Show loading state with simple effect
        qtyGroup.style.opacity = '0.6';
        qtyGroup.style.pointerEvents = 'none';
        isUpdating = true;
        
        // Add loading indicator
        var loadingIcon = document.createElement('div');
        loadingIcon.className = 'loading-overlay';
        loadingIcon.innerHTML = '<i class="fas fa-sync-alt fa-spin"></i>';
        qtyGroup.style.position = 'relative';
        qtyGroup.appendChild(loadingIcon);
        
        // Update local calculation immediately for better UX
        updateLocalCalculation(productId, qty);
        
        // Submit form after short delay for better UX
        setTimeout(function() {
            var form = document.getElementById('form-update-' + productId);
            if (form) {
                form.submit();
            } else {
                // Fallback: reload page
                window.location.reload();
            }
        }, 300);
        
        return false;
    }
    
    function updateLocalCalculation(productId, newQuantity) {
        var cartItem = document.getElementById('cart-item-' + productId);
        var price = parseFloat(cartItem.dataset.price);
        var newTotal = price * newQuantity;
        
        // Update item total
        var totalElement = document.getElementById('total-' + productId);
        if (totalElement) {
            totalElement.textContent = newTotal.toLocaleString() + 'đ';
        }
        
        // Update cart summary (rough calculation)
        updateCartSummaryLocal();
    }
    
    function updateCartSummaryLocal() {
        var totalQuantity = 0;
        var subtotal = 0;
        
        // Calculate from all quantity inputs
        document.querySelectorAll('.quantity-input').forEach(function(input) {
            var productId = input.id.replace('qty-', '');
            var cartItem = document.getElementById('cart-item-' + productId);
            var price = parseFloat(cartItem.dataset.price);
            var quantity = parseInt(input.value) || 0;
            
            totalQuantity += quantity;
            subtotal += price * quantity;
        });
        
        // Update display
        var cartCountElement = document.getElementById('cart-count');
        var summaryCountElement = document.getElementById('summary-count');
        var summarySubtotalElement = document.getElementById('summary-subtotal');
        var finalTotalElement = document.getElementById('final-total');
        
        if (cartCountElement) cartCountElement.textContent = totalQuantity;
        if (summaryCountElement) summaryCountElement.textContent = totalQuantity;
        if (summarySubtotalElement) summarySubtotalElement.textContent = subtotal.toLocaleString() + 'đ';
        
        // Calculate shipping and final total
        var shippingFee = subtotal >= 500000 ? 0 : 30000;
        var finalTotal = subtotal + shippingFee;
        
        if (finalTotalElement) finalTotalElement.textContent = finalTotal.toLocaleString() + 'đ';
        
        // Update shipping fee display
        var shippingElement = document.getElementById('shipping-fee');
        if (shippingElement) {
            if (shippingFee === 0) {
                shippingElement.innerHTML = '<span>Miễn phí</span>';
            } else {
                shippingElement.innerHTML = '<span>' + shippingFee.toLocaleString() + 'đ</span>';
            }
        }
        
        // Update navbar cart badge if exists
        var cartBadge = document.querySelector('.cart-badge');
        if (cartBadge) {
            cartBadge.textContent = totalQuantity;
        }
    }

    function removeItem(productId) {
        if (confirm('Bạn có chắc chắn muốn xóa sản phẩm này?')) {
            var cartItem = document.getElementById('cart-item-' + productId);
            
            // Add fade out effect
            cartItem.style.transition = 'all 0.3s ease';
            cartItem.style.opacity = '0.5';
            cartItem.style.transform = 'translateX(-20px)';
            
            setTimeout(function() {
                // Submit remove form
                var form = $('<form>', {
                    method: 'POST',
                    action: '@Url.Action("Remove", "Cart")'
                });
                
                form.append($('<input>', {
                    type: 'hidden',
                    name: 'id',
                    value: productId
                }));
                
                form.append($('@Html.AntiForgeryToken()'));
                
                $('body').append(form);
                form.submit();
            }, 300);
        }
    }

    function clearCart() {
        if (confirm('Bạn có chắc chắn muốn xóa tất cả sản phẩm khỏi giỏ hàng?')) {
            window.location.href = '@Url.Action("Clear", "Cart")';
        }
    }

    function applyPromoCode() {
        var code = $('#promoCode').val().trim();
        if (code) {
            alert('Chức năng mã giảm giá sẽ sớm được cập nhật!');
        } else {
            alert('Vui lòng nhập mã giảm giá!');
        }
    }

    // Document ready
    $(document).ready(function() {
        // Show success/error messages
        @if (TempData["SuccessMessage"] != null)
        {
            <text>
            setTimeout(function() {
                showNotification('@Html.Raw(Html.Encode(TempData["SuccessMessage"].ToString()))', 'success');
            }, 100);
            </text>
        }
        
        @if (TempData["ErrorMessage"] != null)
        {
            <text>
            setTimeout(function() {
                showNotification('@Html.Raw(Html.Encode(TempData["ErrorMessage"].ToString()))', 'error');
            }, 100);
            </text>
        }
        
        // Handle quantity input validation
        $('.quantity-input').on('input', function() {
            var value = parseInt(this.value);
            if (isNaN(value) || value < 1) {
                this.value = 1;
            }
            if (value > 99) {
                this.value = 99;
            }
        });
    });

    function showNotification(message, type) {
        var className = type === 'success' ? 'alert-success' : 'alert-danger';
        var icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';
        
        var notification = $('<div class="alert ' + className + ' alert-dismissible fade show notification-popup" role="alert">' +
            '<i class="fas ' + icon + '"></i> ' + message +
            '<button type="button" class="close" data-dismiss="alert">' +
            '<span>&times;</span>' +
            '</button>' +
            '</div>');
        
        $('body').prepend(notification);
        
        // Auto dismiss after 5 seconds
        setTimeout(function() {
            notification.alert('close');
        }, 5000);
    }
    </script>

    <style>
    .loading-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(255, 255, 255, 0.9);
        border-radius: 50%;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10;
        color: #667eea;
    }
    
    .quantity-input-group {
        position: relative;
    }
    </style>

    @Html.AntiForgeryToken()
}
